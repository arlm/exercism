# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

[*]
indent_style = space
indent_size = 4
end_of_line = lf
charset = utf-8
insert_final_newline = true
trim_trailing_whitespace = true

[*.{yml,yaml}]
indent_size = 2

[*.{md,mdx}]
trim_trailing_whitespace = false

[*.{htm,html,js,jsm,ts,tsx,cjs,cts,ctsx,mjs,mts,mtsx,css,sass,scss,less,pcss,svg,vue}]
indent_size = 2

[*.{xml,config}]
indent_size = 2

[*.{cmd,bat}]
end_of_line = crlf

[*.sh]
end_of_line = lf

[*.{sh,bat.tpl,Makefile.tpl}]
indent_style = tab

[*.{js,ts,json,json5,webmanifest}]
indent_size = 2

[*.{js,*.ts}]
block_comment_start = /**
block_comment = *
block_comment_end = */

[Makefile]
indent_style = tab

[*.sln]
indent_style = tab

[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

[*.{cs,csx,vb,vbx,fs,fsx}]
charset = utf-8-bom

[*.fs]
fsharp_max_array_or_list_width=120
fsharp_max_infix_operator_expression=80
fsharp_max_value_binding_width=120

[GenerateHtml.fs]
fsharp_experimental_elmish = true

###############################
# Core EditorConfig Options   #
###############################

; This file is for unifying the coding style for different editors and IDEs.
; More information at:
; https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference?view=vs-2017
; https://docs.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options?view=vs-2017

[Zipper.cs]
indent_size = 4

###############################
# .NET Coding Conventions     #
###############################
[*.{cs,vb,fs}]

# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/configuration-options#scope
# Default Severity for all .NET Code Style rules below
dotnet_analyzer_diagnostic.severity = suggestion

# .NET Style Rules
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/language-rules#net-style-rules

# Organize usings
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = true

dotnet_style_operator_placement_when_wrapping = beginning_of_line:warning

# this. and Me. preferences
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Suggest more modern language features when available
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_object_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed:suggestion

# Whitespace options
dotnet_style_allow_multiple_blank_lines_experimental = false

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion

# Modifier preferences
dotnet_style_require_accessibility_modifiers = always:suggestion
dotnet_style_readonly_field = true:suggestion

# Expression-level preferences
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion

dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_code_quality_unused_parameters = non_public:suggestion

###############################
# Naming Styles               #
###############################

# Defining the 'First_word_upper_case' naming style
dotnet_naming_style.first_word_upper_case_style.capitalization = first_word_upper
dotnet_naming_style.first_word_upper_case_style.word_separator = _

# Defining the '_First_word_upper_case' naming style
dotnet_naming_style.first_word_upper_case_underscore_style.capitalization = first_word_upper
dotnet_naming_style.first_word_upper_case_underscore_style.word_separator = _
dotnet_naming_style.first_word_upper_case_underscore_style.required_prefix = _

# Defining the 'PascalCase' naming style
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Defining the '_PascalCase' naming style
dotnet_naming_style.pascal_case_underscore_style.capitalization = pascal_case
dotnet_naming_style.pascal_case_underscore_style.required_prefix = _

# Define the 'camelCase' naming style
dotnet_naming_style.camel_case_style.capitalization = camel_case

# Define the '_camelCase' naming style
dotnet_naming_style.camel_case_underscored_style.capitalization = camel_case
dotnet_naming_style.camel_case_underscored_style.required_prefix = _

# Defining the 'ALL_UPPER' naming style
dotnet_naming_style.all_upper_case_style.capitalization = all_upper
dotnet_naming_style.all_upper_case_style.word_separator = _

# Defining the '_ALL_UPPER' naming style
dotnet_naming_style.all_upper_case_underscored_style.capitalization = all_upper
dotnet_naming_style.all_upper_case_underscored_style.required_prefix = _
dotnet_naming_style.all_upper_case_underscored_style.word_separator = _

# Defining the 'all_lower' naming style
dotnet_naming_style.all_lower_case_style.capitalization = all_lower
dotnet_naming_style.all_lower_case_style.word_separator = _

# Defining the '_all_lower' naming style
dotnet_naming_style.all_lower_case_underscored_style.capitalization = all_lower
dotnet_naming_style.all_lower_case_underscored_style.required_prefix = _
dotnet_naming_style.all_lower_case_underscored_style.word_separator = _

# Defining the 's_static_field_style' naming style
dotnet_naming_style.static_field_style.capitalization = camel_case
dotnet_naming_style.static_field_style.required_prefix = s_

# Defining the 'm_instance_field_style' naming style
dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = m_

# Defining the 'interface_style' naming style
dotnet_naming_style.interface_style.capitalization = pascal_case
dotnet_naming_style.interface_style.required_prefix = I

# Defining the 'type_parameter_style' naming style
dotnet_naming_style.type_parameter_style.capitalization = pascal_case
dotnet_naming_style.type_parameter_style.required_prefix = T

# Defining the 'async_style' naming style
dotnet_naming_style.async_style.capitalization = pascal_case
dotnet_naming_style.async_style.required_suffix = Async

# Defining the 'abstract_style' naming style
dotnet_naming_style.abstract_style.capitalization = pascal_case
dotnet_naming_style.abstract_style.required_suffix = Base

# disallowed_style - Anything that has this style applied is marked as disallowed
dotnet_naming_style.disallowed_style.capitalization  = pascal_case
dotnet_naming_style.disallowed_style.required_prefix = ____RULE_VIOLATION____
dotnet_naming_style.disallowed_style.required_suffix = ____RULE_VIOLATION____

# internal_error_style - This style should never occur... if it does, it indicates a bug in file or in the parser using the file
dotnet_naming_style.internal_error_style.capitalization  = pascal_case
dotnet_naming_style.internal_error_style.required_prefix = ____INTERNAL_ERROR____
dotnet_naming_style.internal_error_style.required_suffix = ____INTERNAL_ERROR____

###############################
# Naming Symbol Groups        #
###############################

# Defining the 'public_symbols' symbol group
dotnet_naming_symbols.public_symbols.applicable_kinds = property,method,field,event,delegate
dotnet_naming_symbols.public_symbols.applicable_accessibilities = public
dotnet_naming_symbols.public_symbols.required_modifiers = readonly

# Define the 'private_fields' symbol group:
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private

# Define the 'private_static_fields' symbol group
dotnet_naming_symbols.private_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_static_fields.required_modifiers = static

# Define the 'non_private_static_fields' symbol group
dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static

# Define the 'non_private_readonly_fields' symbol group
dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly

# Define the 'public_protected_static_readonly_fields' symbol group
dotnet_naming_symbols.public_protected_static_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.public_protected_static_readonly_fields.required_modifiers         = static, readonly
dotnet_naming_symbols.public_protected_static_readonly_fields.applicable_kinds           = field

# Define the 'public_protected_constant_fields' symbol group
dotnet_naming_symbols.public_protected_constant_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.public_protected_constant_fields.required_modifiers         = const
dotnet_naming_symbols.public_protected_constant_fields.applicable_kinds           = field

# Define the 'other_public_protected_fields' symbol group
dotnet_naming_symbols.other_public_protected_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.other_public_protected_fields.applicable_kinds           = field

# Define the 'constants' symbol group
dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

# Define the 'constant_or_readonly' symbol group
dotnet_naming_symbols.constant_or_readonly.applicable_kinds = *
dotnet_naming_symbols.constant_or_readonly.required_modifiers = const, readonly

# Define the 'constant_fields' symbol group
dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities = *
dotnet_naming_symbols.constant_fields.required_modifiers = const

# Define the 'static_fields' symbol group
dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static

# Define the 'instance_fields' symbol group
dotnet_naming_symbols.instance_fields.applicable_kinds = field

# Define the 'locals_and_parameters' symbol group
dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

# Define the 'local_functions' symbol group
dotnet_naming_symbols.local_functions.applicable_kinds = local_function

# Defining the 'public_symbols' symbol group
dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = *

# Defining the 'interfaces' symbol group
dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = *

# Defining the 'type_parameter' symbol group
dotnet_naming_symbols.type_parameter.applicable_kinds = type_parameter

# Defining the 'async' symbol group
dotnet_naming_symbols.async.applicable_kinds = *
dotnet_naming_symbols.async.required_modifiers = async
dotnet_naming_symbols.async.applicable_accessibilities = *

# Defining the 'abstract_or_must_inherit' symbol group
dotnet_naming_symbols.abstract_or_must_inherit.applicable_kinds = *
dotnet_naming_symbols.abstract_or_must_inherit.required_modifiers = abstract, must_inherit
dotnet_naming_symbols.abstract_or_must_inherit.applicable_accessibilities = *

# Define the 'all_members' symbol group
dotnet_naming_symbols.all_members.applicable_kinds = *

# Define the 'sanity_check_uncovered_field_case_group' symbol group
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_accessibilities = *
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_kinds = field

# Define the 'all_element_group' symbol group
dotnet_naming_symbols.all_element_group.applicable_kinds = namespace, class, enum, struct, delegate, event, method, property

############################################################################################################################
# The following .editorconfig snippet contains a naming convention that specifies that public properties, methods, fields, #
# events, and delegates that are marked readonly are PascalCase. This naming convention specifies multiple kinds of        #
# symbol to apply the rule to, using a comma to separate the values.                                                       #
#                                                                                                                          #
# E.g.: public readonly string Value = "value";                                                                            #
############################################################################################################################

dotnet_naming_rule.public_members_must_be_capitalized.symbols  = public_symbols
dotnet_naming_rule.public_members_must_be_capitalized.style    = pascal_case_style
dotnet_naming_rule.public_members_must_be_capitalized.severity = suggestion

dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.symbols    = public_protected_static_readonly_fields
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.severity   = suggestion

############################################################################################################################
# The following .editorconfig snippet enforces that private instance fields are camelCase;                                 #
#                                                                                                                          #
# E.g.: private  string _value = "value"; private static string value = "value";                                           #
############################################################################################################################

dotnet_naming_rule.private_fields_underscored.symbols = private_fields
dotnet_naming_rule.private_fields_underscored.style = camel_case_underscored_style
dotnet_naming_rule.private_fields_underscored.severity = none

dotnet_naming_rule.private_static_fields_none.symbols = private_static_fields
dotnet_naming_rule.private_static_fields_none.style = camel_case_underscored_style
dotnet_naming_rule.private_static_fields_none.severity = none

############################################################################################################################
# The following .editorconfig snippet enforces that non-private static fields are PascalCase                               #
#                                                                                                                          #
# E.g.: public static string Value = "value";                                                                              #
############################################################################################################################

dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = pascal_case_style
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion

############################################################################################################################
# The following .editorconfig snippet enforces that non-private readonly fields are PascalCase                             #
#                                                                                                                          #
# E.g.: public readonly string Value = "value";                                                                            #
############################################################################################################################

dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = pascal_case_style
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = suggestion

############################################################################################################################
# The following .editorconfig snippet enforces that No other public/protected/protected_internal fields are allowed        #
############################################################################################################################

dotnet_naming_rule.other_public_protected_fields_disallowed_rule.symbols = other_public_protected_fields_group
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.style = disallowed_style
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.severity = error

############################################################################################################################
# The following .editorconfig snippet enforces that Constants are ALL_UPPER                                                #
#                                                                                                                          #
# E.g.: public const string DEFAULT_VALUE = "value";                                                                       #
############################################################################################################################

dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = all_upper_case_style
dotnet_naming_rule.constants_should_be_pascal_case.severity = warning

dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = all_upper_case_style
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = warning

dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.symbols    = public_protected_constant_fields_group
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.style      = all_upper_case_style
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.severity   = warning

############################################################################################################################
# The following .editorconfig snippet enforces that Static fields are camelCase and start with s_                          #
#                                                                                                                          #
# E.g.: public static string s_value = "value";                                                                            #
############################################################################################################################

dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style
dotnet_naming_rule.static_fields_should_be_camel_case.severity = none

############################################################################################################################
# The following .editorconfig snippet enforces that Instance fields are camelCase and start with _                         #
#                                                                                                                          #
# E.g.: public string _value = "value";                                                                                    #
############################################################################################################################

dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = camel_case_underscored_style
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = none

############################################################################################################################
# The following .editorconfig snippet enforces that Locals and parameters are camelCase                                    #
#                                                                                                                          #
# E.g.: string value = "value";                                                                                            #
############################################################################################################################

dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style
dotnet_naming_rule.locals_should_be_camel_case.severity = warning

############################################################################################################################
# The following .editorconfig snippet enforces that Local functions are PascalCase                                         #
#                                                                                                                          #
# E.g.: void string MethodToUse() {}                                                                                       #
############################################################################################################################

dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = pascal_case_style
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = warning

############################################################################################################################
# The following .editorconfig snippet enforces that interfaces are PascalCase and must start with I                        #
#                                                                                                                          #
# E.g.: public interface IEnabler                                                                                          #
############################################################################################################################

dotnet_naming_rule.members_should_be_pascal_case.symbols = interfaces
dotnet_naming_rule.members_should_be_pascal_case.style = interface_style
dotnet_naming_rule.members_should_be_pascal_case.severity = warning

############################################################################################################################
# The following .editorconfig snippet enforces that type parameter are PascalCase and must start with T                    #
#                                                                                                                          #
# E.g.: public TResult Method<TResult>(TResult value) { return value; }                                                    #
############################################################################################################################

dotnet_naming_rule.members_should_be_pascal_case.symbols = type_parameter
dotnet_naming_rule.members_should_be_pascal_case.style = type_parameter_style
dotnet_naming_rule.members_should_be_pascal_case.severity = warning

############################################################################################################################
# The following .editorconfig snippet enforces that async methods are PascalCase and must end with Async                   #
#                                                                                                                          #
# E.g.: public async Task<boolean> MethodAsync() { return true; }                                                          #
############################################################################################################################

dotnet_naming_rule.members_should_be_pascal_case.symbols = async
dotnet_naming_rule.members_should_be_pascal_case.style = async_style
dotnet_naming_rule.members_should_be_pascal_case.severity = warning

############################################################################################################################
# The following .editorconfig snippet enforces that asbtract classes are PascalCase and must end with Base                 #
#                                                                                                                          #
# E.g.: public abstract class ObjectBase {  }                                                                              #
############################################################################################################################

dotnet_naming_rule.members_should_be_pascal_case.symbols = abstract_or_must_inherit
dotnet_naming_rule.members_should_be_pascal_case.style = abstract_style
dotnet_naming_rule.members_should_be_pascal_case.severity = warning

############################################################################################################################
# The following .editorconfig snippet enforces that By default, name items with PascalCase                                 #
#                                                                                                                          #
# E.g.: void string MethodToUse() {}                                                                                       #
############################################################################################################################

dotnet_naming_rule.element_rule.symbols = all_element_group
dotnet_naming_rule.element_rule.style = pascal_case_style
dotnet_naming_rule.element_rule.severity = suggestion

dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style
dotnet_naming_rule.members_should_be_pascal_case.severity = suggestion

############################################################################################################################
# This rule should never fire.  However, it's included for at least two purposes:                                          #
# First, it helps to understand, and root-case certain types of issues, such as bugs in .editorconfig parsers.             #
# Second, it helps to raise immediate awareness if a new field type is added (as occurred recently in C#).                 #
############################################################################################################################

dotnet_naming_rule.sanity_check_uncovered_field_case_rule.symbols = sanity_check_uncovered_field_case_group
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.style = internal_error_style
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.severity = error

###############################
# C# Code Style Rules         #
###############################
[*.cs]

# var preferences
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Expression-bodied members
csharp_style_expression_bodied_constructors = true:suggestion
csharp_style_expression_bodied_methods = true:suggestion
csharp_style_expression_bodied_operators = true:suggestion
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion

# Pattern-matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_prefer_pattern_matching = true:suggestion

# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# Expression-level preferences
# IDE0011: Add braces
# csharp_prefer_braces = when_multiline:warning
csharp_prefer_braces = true:warning
# NOTE: We need the below severity entry for Add Braces due to https://github.com/dotnet/roslyn/issues/44201
dotnet_diagnostic.IDE0011.severity = warning

csharp_prefer_simple_default_expression = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion

# Suggest more modern language features when available
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_expression_bodied_local_functions = when_on_single_line:suggestion
csharp_style_prefer_switch_expression = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_style_prefer_extended_property_pattern = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_prefer_method_group_conversion= true:warning
csharp_style_prefer_utf8_string_literals = true:suggestion
csharp_style_prefer_readonly_struct = true:suggestion
csharp_style_prefer_readonly_struct_member = true:suggestion

csharp_style_namespace_declarations = block_scoped:warning
csharp_style_prefer_top_level_statements = false:warning
csharp_style_prefer_primary_constructors  = false:warning

csharp_prefer_static_local_function = false:silent
csharp_prefer_simple_using_statement = false:suggestion

csharp_using_directive_placement = outside_namespace:warning

###############################
# C# Formatting Rules         #
###############################

# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = false

# Space preferences
csharp_space_after_cast = true
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = true
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = true
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = true
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

###############################
# Warnings                    #
###############################

# All naming options have rule ID IDE1006 and title Naming rule violation.
# The severity value must be warning or error to be enforced on build.
dotnet_diagnostic.IDE1006.severity = warning

# IDE0060: Remove unused parameter
dotnet_diagnostic.IDE0060.severity = warning

# IDE0040: Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = warning

# IDE0052: Remove unread private member
dotnet_diagnostic.IDE0052.severity = warning

# IDE0059: Unnecessary assignment to a value
dotnet_diagnostic.IDE0059.severity = warning

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# CA1822: Make member static
dotnet_diagnostic.CA1822.severity = suggestion

# Prefer "var" everywhere
dotnet_diagnostic.IDE0007.severity = suggestion

# csharp_style_allow_embedded_statements_on_same_line_experimental
dotnet_diagnostic.IDE2001.severity = suggestion

# csharp_style_allow_blank_lines_between_consecutive_braces_experimental
dotnet_diagnostic.IDE2002.severity = suggestion

# csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental
dotnet_diagnostic.IDE2004.severity = suggestion

# csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental
dotnet_diagnostic.IDE2005.severity = suggestion

# csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental
dotnet_diagnostic.IDE2006.severity = suggestion

###############################
# VB Coding Conventions       #
###############################
[*.vb]
# Modifier preferences
visual_basic_preferred_modifier_order = Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async:suggestion
visual_basic_style_unused_value_expression_statement_preference = unused_local_variable:suggestion
visual_basic_style_unused_value_assignment_preference = unused_local_variable:suggestion
visual_basic_style_prefer_isnot_expression = true:suggestion
visual_basic_style_prefer_simplified_object_creation  = true:suggestion
